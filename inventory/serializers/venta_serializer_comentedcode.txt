# El POST de la venta me tiene que devolver
# cantidad : "1" codigo_de_barra : "5468643" codigo_del_local : "w503 2" descripcion : "Freno de citroen 13V 2" lote : 2 precio_bonificado : "90000.00" precio_de_lista : "22222.00" precio_de_venta : "200000.00" prooveedor : "carlitos 3"
# ObjetoDeseado: Array(2)
# 0: cantidad: "1", codigo_de_barra: "5468643", codigo_del_local: "w503 2", descripcion: "Freno de citroen 13V 2", lote: 2,
# precio_bonificado: "90000.00",
# precio_de_lista: "22222.00",
# precio_de_venta: "200000.00",
# prooveedor: "carlitos 3"

# Object1: cantidad: "2",
# codigo_de_barra: "542342",
# codigo_del_local: "w503 3",
# descripcion: "Freno de citroen 13V 3",
# lote: 4precio_bonificado: "9999.00",
# precio_de_lista: "33333.00",
# precio_de_venta: "210000.00",
# prooveedor: "proveedor A"

# class VentaSerializer(serializers.ModelSerializer):
#     # productosLotes = Tabla_intermedia_ventaSerializer(
#     #     source='Tabla_intermedia_venta_set', many=True)

#     class Meta:
#         model = Venta
#         fields = '__all__'

# class VentaSerializer(serializers.ModelSerializer):
#     # productosLotes = Tabla_intermedia_ventaSerializer(
#     #     source='Tabla_intermedia_venta_set', many=True)

#     class Meta:
#         model = Venta
#         fields = '__all__'
#         depth = 2

# class UserSerializer(serializers.ModelSerializer):
#   class Meta:
#     model = User
#     fields = '__all__'

#   def create(self, validated_data):
#     user = User(**validated_data)
#     user.set_password(validated_data['password'])
#     user.save()
#     return user

#   def update(self, instance, validated_data):
#     updated_user = super().update(instance, validated_data)
#     updated_user.set_password(validated_data['password'])
#     updated_user.save()
#     return updated_user


# class VentaSerializerPOST(serializers.ModelSerializer):

#     # print(fields)

#     class Meta:
#         model = Venta
#         fields = '__all_'
#         depth = 2

# def create(self, validated_data):
#     venta = Venta(**validated_data)
#     # venta.set_password(validated_data['password'])
#     venta.save()
#     return venta

# def update(self, instance, validated_data):
#     updated_venta = super().update(instance, validated_data)
#     updated_venta.set_password(validated_data['password'])
#     updated_venta.save()
#     return updated_venta

# class TablaIntermediaVentaSerializer(serializers.ModelSerializer):
  # producto_id = serializers.IntegerField(write_only=True, required=False)
    # codigo_del_local = serializers.CharField(write_only=True, required=False)
 # def validate(self, data):
    #     # Asegurarse de que al menos uno de los campos producto_id o codigo_del_local estÃ© presente
    #     if not data.get('producto_id') and not data.get('codigo_del_local'):
    #         raise serializers.ValidationError(
    #             "Debe proporcionar producto_id o codigo_del_local.")
    #     return data

    #class VentaSerializer(serializers.ModelSerializer):
    # lotes = TablaIntermediaVentaSerializer(many=True, write_only=True)
    # lotes = TablaIntermediaVentaSerializer(many=True)
    # lotes = []
    # print('=======================================')
    # print('lotes => ', lotes, 'tipo de dato => ', type(lotes))
    # print('=======================================')
    # # print('Veneta con backward ==> ',
    # #       Venta.objects.first().tabla_intermedia_venta_set.all())
    # for venta in Venta.objects.all():
    #     for item in venta.tabla_intermedia_venta_set.all():
    #         print(item.lote.id, item.cantidad)
    #         lotes.append({item.id, item.lote.precio_de_venta,
    #                      item.lote.producto.descripcion})
    # print(lotes)
    # {
    #   "usuario": "Empleado 1",
    #   "venta": 2,
    #   "fecha": "30/07/2024",
    #   "precio_total": 245000.00,
    #   "productos": [
    #     {
    #       "cantidad": "4",
    #       "codigo_de_barra": "43252",
    #       "descripcion": "Freno de cangoo",
    #       "precio_de_venta": "48000.00"
    #     },
    #     {
    #       "cantidad": "2",
    #       "codigo_de_barra": "542342",
    #       "descripcion": "Freno de citroen 13V 3",
    #       "precio_de_venta": "210000.00"
    #     }
    #   ]
    # }

# Formato JSON sin trailing comma
# https://stackoverflow.com/questions/62347538/json-parse-error-expecting-property-name-enclosed-in-double-quotes-line-11-co

